// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModbusData.DataAccess.Contexts;

#nullable disable

namespace ModbusData.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("ModbusData.Domain.Entities.Device.SlaveDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IpAddress");

                    b.HasKey("Id");

                    b.ToTable("SlaveDevices", (string)null);
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Modbus_Network.ModbusNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterIpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("MasterIpAddress");

                    b.HasKey("Id");

                    b.ToTable("ModbusNetworks", (string)null);
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Unit.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufactererName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMeasurement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModbusAddress")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("SamplingPeriod")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Variable");
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.AnalogicVariable", b =>
                {
                    b.HasBaseType("ModbusData.Domain.Entities.Variables.Variable");

                    b.Property<Guid>("UnitID")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("REAL");

                    b.ToTable("AnalogicVariables", (string)null);
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.DigitalVariable", b =>
                {
                    b.HasBaseType("ModbusData.Domain.Entities.Variables.Variable");

                    b.Property<Guid>("UnitID")
                        .HasColumnType("TEXT");

                    b.Property<short>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("INTEGER")
                        .HasColumnName("Value");

                    b.ToTable("DigitalVariables", (string)null);
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Device.SlaveDevice", b =>
                {
                    b.HasOne("ModbusData.Domain.Entities.Modbus_Network.ModbusNetwork", null)
                        .WithMany("Slaves")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.Variable", b =>
                {
                    b.HasOne("ModbusData.Domain.Entities.Device.SlaveDevice", null)
                        .WithMany("Variables")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModbusData.Domain.Entities.Unit.Unit", null)
                        .WithMany("Variables")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.AnalogicVariable", b =>
                {
                    b.HasOne("ModbusData.Domain.Entities.Variables.Variable", null)
                        .WithOne()
                        .HasForeignKey("ModbusData.Domain.Entities.Variables.AnalogicVariable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Variables.DigitalVariable", b =>
                {
                    b.HasOne("ModbusData.Domain.Entities.Variables.Variable", null)
                        .WithOne()
                        .HasForeignKey("ModbusData.Domain.Entities.Variables.DigitalVariable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Device.SlaveDevice", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Modbus_Network.ModbusNetwork", b =>
                {
                    b.Navigation("Slaves");
                });

            modelBuilder.Entity("ModbusData.Domain.Entities.Unit.Unit", b =>
                {
                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
